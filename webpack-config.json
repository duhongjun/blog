{
  "devtool": "cheap-module-source-map",
  "entry": [
    "/Users/dudoudou/Desktop/ts-blog/node_modules/react-scripts-ts/config/polyfills.js",
    "/Users/dudoudou/Desktop/ts-blog/node_modules/react-dev-utils/webpackHotDevClient.js",
    "/Users/dudoudou/Desktop/ts-blog/src/index.tsx"
  ],
  "output": {
    "pathinfo": true,
    "filename": "static/js/bundle.js",
    "chunkFilename": "static/js/[name].chunk.js",
    "publicPath": "/",
    "devtoolModuleFilenameTemplate": "info =>\n      path.resolve(info.absoluteResourcePath).replace(/\\\\/g, '/')"
  },
  "resolve": {
    "modules": [
      "node_modules",
      "/Users/dudoudou/Desktop/ts-blog/node_modules"
    ],
    "extensions": [
      ".mjs",
      ".web.ts",
      ".ts",
      ".web.tsx",
      ".tsx",
      ".web.js",
      ".js",
      ".json",
      ".web.jsx",
      ".jsx",
      ".less"
    ],
    "alias": {
      "babel-runtime": "/Users/dudoudou/Desktop/ts-blog/node_modules/babel-runtime",
      "react-native": "react-native-web",
      "src": "/Users/dudoudou/Desktop/ts-blog/src"
    },
    "plugins": [
      {
        "appSrc": "/Users/dudoudou/Desktop/ts-blog/src",
        "allowedFiles": {}
      },
      {
        "source": "described-resolve",
        "target": "resolve",
        "extensions": [
          ".ts",
          ".tsx"
        ],
        "log": {
          "log": "(message) => logger(loaderOptions.logInfoToStdOut ? stdoutConsole : stderrConsole, message)",
          "logInfo": "(_message) => {\n    /* Do nothing */\n}",
          "logWarning": "(message) => logger(stderrConsole, yellow(message))",
          "logError": "(message) => logger(stderrConsole, red(message))"
        },
        "baseUrl": "./",
        "absoluteBaseUrl": "/Users/dudoudou/Desktop/ts-blog/",
        "matchPath": "function (requestedModule, readJson, fileExists, extensions, callback) {\n        return matchFromAbsolutePathsAsync(absolutePaths, requestedModule, readJson, fileExists, extensions, callback);\n    }"
      }
    ]
  },
  "module": {
    "strictExportPresence": true,
    "rules": [
      {
        "test": "/\\.(js|jsx|mjs)$/",
        "loader": "/Users/dudoudou/Desktop/ts-blog/node_modules/source-map-loader/index.js",
        "enforce": "pre",
        "include": "/Users/dudoudou/Desktop/ts-blog/src"
      },
      {
        "oneOf": [
          {
            "test": [
              "/\\.bmp$/",
              "/\\.gif$/",
              "/\\.jpe?g$/",
              "/\\.png$/"
            ],
            "loader": "/Users/dudoudou/Desktop/ts-blog/node_modules/url-loader/index.js",
            "options": {
              "limit": 10000,
              "name": "static/media/[name].[hash:8].[ext]"
            }
          },
          {
            "test": "/\\.(js|jsx|mjs)$/",
            "include": "/Users/dudoudou/Desktop/ts-blog/src",
            "loader": "/Users/dudoudou/Desktop/ts-blog/node_modules/babel-loader/lib/index.js",
            "options": {
              "babelrc": false,
              "presets": [
                "/Users/dudoudou/Desktop/ts-blog/node_modules/babel-preset-react-app/index.js"
              ],
              "compact": true
            }
          },
          {
            "test": "/\\.(ts|tsx)$/",
            "include": "/Users/dudoudou/Desktop/ts-blog/src",
            "use": [
              {
                "loader": "/Users/dudoudou/Desktop/ts-blog/node_modules/ts-loader/index.js",
                "options": {
                  "getCustomTransformers": "() => ({\n      before: [\n        tsImportPluginFactory([\n          {\n            libraryName: 'antd',\n            libraryDirectory: 'es',\n            style: 'css'\n          },\n          {\n            style: false,\n            libraryName: 'lodash',\n            libraryDirectory: null,\n            camel2DashComponentName: false\n          }\n        ])\n      ]\n    })"
                }
              }
            ]
          },
          {
            "test": "/\\.css$/",
            "use": [
              "/Users/dudoudou/Desktop/ts-blog/node_modules/style-loader/index.js",
              {
                "loader": "/Users/dudoudou/Desktop/ts-blog/node_modules/css-loader/index.js",
                "options": {
                  "importLoaders": 1
                }
              },
              {
                "loader": "/Users/dudoudou/Desktop/ts-blog/node_modules/postcss-loader/lib/index.js",
                "options": {
                  "ident": "postcss",
                  "plugins": "() => [\n                    require('postcss-flexbugs-fixes'),\n                    autoprefixer({\n                      browsers: [\n                        '>1%',\n                        'last 4 versions',\n                        'Firefox ESR',\n                        'not ie < 9', // React doesn't support IE8 anyway\n                      ],\n                      flexbox: 'no-2009',\n                    }),\n                  ]"
                }
              }
            ]
          },
          {
            "exclude": [
              "/\\.(js|jsx|mjs)$/",
              "/\\.html$/",
              "/\\.json$/",
              "/\\.less$/"
            ],
            "loader": "/Users/dudoudou/Desktop/ts-blog/node_modules/file-loader/index.js",
            "options": {
              "name": "static/media/[name].[hash:8].[ext]"
            }
          }
        ]
      },
      {
        "test": "/\\.less$/",
        "use": [
          "style-loader",
          "css-loader",
          {
            "loader": "less-loader"
          }
        ]
      }
    ]
  },
  "plugins": [
    {
      "replacements": {
        "NODE_ENV": "development",
        "PUBLIC_URL": "",
        "REACT_APP_ENV": "development"
      }
    },
    {
      "options": {
        "template": "/Users/dudoudou/Desktop/ts-blog/public/index.html",
        "filename": "index.html",
        "hash": false,
        "inject": true,
        "compile": true,
        "favicon": false,
        "minify": false,
        "cache": true,
        "showErrors": true,
        "chunks": "all",
        "excludeChunks": [],
        "title": "Webpack App",
        "xhtml": false
      }
    },
    {
      "options": {}
    },
    {
      "definitions": {
        "process.env": {
          "NODE_ENV": "\"development\"",
          "PUBLIC_URL": "\"\"",
          "REACT_APP_ENV": "\"development\""
        }
      }
    },
    {
      "options": {},
      "fullBuildTimeout": 200,
      "requestTimeout": 10000
    },
    {
      "options": {},
      "pathCache": {},
      "fsOperations": 0,
      "primed": false
    },
    {
      "nodeModulesPath": "/Users/dudoudou/Desktop/ts-blog/node_modules"
    },
    {
      "resourceRegExp": "/^\\.\\/locale$/",
      "contextRegExp": "/moment$/",
      "checkIgnore": "function () { [native code] }"
    },
    {
      "options": {
        "async": false,
        "watch": "/Users/dudoudou/Desktop/ts-blog/src",
        "tsconfig": "/Users/dudoudou/Desktop/ts-blog/tsconfig.json",
        "tslint": "/Users/dudoudou/Desktop/ts-blog/tslint.json"
      },
      "tsconfig": "/Users/dudoudou/Desktop/ts-blog/tsconfig.json",
      "tslint": "/Users/dudoudou/Desktop/ts-blog/tslint.json",
      "watch": [
        "/Users/dudoudou/Desktop/ts-blog/src"
      ],
      "ignoreDiagnostics": [],
      "ignoreLints": [],
      "logger": {
        "log": "function () { [native code] }",
        "debug": "function () { [native code] }",
        "info": "function () { [native code] }",
        "warn": "function () { [native code] }",
        "error": "function () { [native code] }",
        "dir": "function () { [native code] }",
        "time": "function () { [native code] }",
        "timeEnd": "function () { [native code] }",
        "trace": "function () { [native code] }",
        "assert": "function () { [native code] }",
        "clear": "function () { [native code] }",
        "count": "function () { [native code] }",
        "countReset": "function () { [native code] }",
        "group": "function () { [native code] }",
        "groupCollapsed": "function () { [native code] }",
        "groupEnd": "function () { [native code] }",
        "Console": "function Console(stdout, stderr, ignoreErrors = true) {\n  if (!(this instanceof Console)) {\n    return new Console(stdout, stderr, ignoreErrors);\n  }\n  if (!stdout || typeof stdout.write !== 'function') {\n    throw new TypeError('Console expects a writable stream instance');\n  }\n  if (!stderr) {\n    stderr = stdout;\n  } else if (typeof stderr.write !== 'function') {\n    throw new TypeError('Console expects writable stream instances');\n  }\n\n  var prop = {\n    writable: true,\n    enumerable: false,\n    configurable: true\n  };\n  prop.value = stdout;\n  Object.defineProperty(this, '_stdout', prop);\n  prop.value = stderr;\n  Object.defineProperty(this, '_stderr', prop);\n  prop.value = ignoreErrors;\n  Object.defineProperty(this, '_ignoreErrors', prop);\n  prop.value = new Map();\n  Object.defineProperty(this, '_times', prop);\n  prop.value = createWriteErrorHandler(stdout);\n  Object.defineProperty(this, '_stdoutErrorHandler', prop);\n  prop.value = createWriteErrorHandler(stderr);\n  Object.defineProperty(this, '_stderrErrorHandler', prop);\n\n  this[kCounts] = new Map();\n\n  Object.defineProperty(this, kGroupIndent, { writable: true });\n  this[kGroupIndent] = '';\n\n  // bind the prototype functions to this Console instance\n  var keys = Object.keys(Console.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var k = keys[v];\n    this[k] = this[k].bind(this);\n  }\n}",
        "dirxml": "function dirxml() { [native code] }",
        "table": "function table() { [native code] }",
        "markTimeline": "function markTimeline() { [native code] }",
        "profile": "function profile() { [native code] }",
        "profileEnd": "function profileEnd() { [native code] }",
        "timeline": "function timeline() { [native code] }",
        "timelineEnd": "function timelineEnd() { [native code] }",
        "timeStamp": "function timeStamp() { [native code] }",
        "context": "function context() { [native code] }"
      },
      "silent": false,
      "async": false,
      "checkSyntacticErrors": false,
      "workersNumber": 1,
      "memoryLimit": 2048,
      "useColors": true,
      "colors": {
        "enabled": true
      },
      "formatter": "function defaultFormatter(message, useColors) {\n        var colors = new chalk.constructor({ enabled: useColors });\n        var messageColor = message.isWarningSeverity() ? colors.bold.yellow : colors.bold.red;\n        var fileAndNumberColor = colors.bold.cyan;\n        var codeColor = colors.grey;\n        return [\n            messageColor(message.getSeverity().toUpperCase() + \" in \") +\n                fileAndNumberColor(message.getFile() + \"(\" + message.getLine() + \",\" + message.getCharacter() + \")\") +\n                messageColor(':'),\n            codeColor(message.getFormattedCode() + ': ') + message.getContent()\n        ].join(os.EOL);\n    }",
      "watchPaths": [],
      "isWatching": false,
      "checkDone": false,
      "compilationDone": false,
      "diagnostics": [],
      "lints": [],
      "emitCallback": "function noopEmitCallback() { }",
      "doneCallback": "function doneCallback() {\n            var _this = this;\n            var elapsed = Math.round(this.elapsed[0] * 1E9 + this.elapsed[1]);\n            if (this.compiler) {\n                this.compiler.applyPlugins('fork-ts-checker-done', this.diagnostics, this.lints, elapsed);\n            }\n            if (!this.silent && this.logger) {\n                if (this.diagnostics.length || this.lints.length) {\n                    (this.lints || []).concat(this.diagnostics).forEach(function (message) {\n                        var formattedMessage = _this.formatter(message, _this.useColors);\n                        message.isWarningSeverity() ? _this.logger.warn(formattedMessage) : _this.logger.error(formattedMessage);\n                    });\n                }\n                if (!this.diagnostics.length) {\n                    this.logger.info(this.colors.green('No type errors found'));\n                }\n                if (this.tslint && !this.lints.length) {\n                    this.logger.info(this.colors.green('No lint errors found'));\n                }\n                this.logger.info('Version: typescript ' + this.colors.bold(this.typescriptVersion) +\n                    (this.tslint ? ', tslint ' + this.colors.bold(this.tslintVersion) : ''));\n                this.logger.info('Time: ' + this.colors.bold(Math.round(elapsed / 1E6).toString()) + 'ms');\n            }\n        }",
      "typescriptVersion": "2.9.1",
      "tslintVersion": "5.10.0"
    }
  ],
  "node": {
    "dgram": "empty",
    "fs": "empty",
    "net": "empty",
    "tls": "empty",
    "child_process": "empty"
  },
  "performance": {
    "hints": false
  }
}